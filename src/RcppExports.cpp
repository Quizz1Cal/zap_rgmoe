// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_D_masked
arma::mat cpp_D_masked(arma::vec zs, arma::vec pi, arma::vec mu, arma::vec sigma);
RcppExport SEXP _zap_rgmoe_cpp_D_masked(SEXP zsSEXP, SEXP piSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type zs(zsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_D_masked(zs, pi, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// cpp_D_unmasked
arma::mat cpp_D_unmasked(double z, arma::vec pi, arma::vec mu, arma::vec sigma);
RcppExport SEXP _zap_rgmoe_cpp_D_unmasked(SEXP zSEXP, SEXP piSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_D_unmasked(z, pi, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// cpp_pi_matrix
arma::mat cpp_pi_matrix(arma::mat X_f, arma::mat w_f);
RcppExport SEXP _zap_rgmoe_cpp_pi_matrix(SEXP X_fSEXP, SEXP w_fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X_f(X_fSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type w_f(w_fSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_pi_matrix(X_f, w_f));
    return rcpp_result_gen;
END_RCPP
}
// cpp_EM_Estep
List cpp_EM_Estep(arma::mat Zs, arma::vec is_masked, arma::mat X_f, arma::mat w_f, arma::mat beta_f, arma::vec sigma2);
RcppExport SEXP _zap_rgmoe_cpp_EM_Estep(SEXP ZsSEXP, SEXP is_maskedSEXP, SEXP X_fSEXP, SEXP w_fSEXP, SEXP beta_fSEXP, SEXP sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Zs(ZsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type is_masked(is_maskedSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_f(X_fSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type w_f(w_fSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta_f(beta_fSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sigma2(sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_EM_Estep(Zs, is_masked, X_f, w_f, beta_f, sigma2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_zap_rgmoe_cpp_D_masked", (DL_FUNC) &_zap_rgmoe_cpp_D_masked, 4},
    {"_zap_rgmoe_cpp_D_unmasked", (DL_FUNC) &_zap_rgmoe_cpp_D_unmasked, 4},
    {"_zap_rgmoe_cpp_pi_matrix", (DL_FUNC) &_zap_rgmoe_cpp_pi_matrix, 2},
    {"_zap_rgmoe_cpp_EM_Estep", (DL_FUNC) &_zap_rgmoe_cpp_EM_Estep, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_zap_rgmoe(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
